
bitswap.o:	file format ELF64-BPF


Disassembly of section .text:

0000000000000000 swap_bits:
;   uint8_t bit1 = ctx->bit1;
       0:	71 13 01 00 00 00 00 00	r3 = *(u8 *)(r1 + 1)
       1:	b4 02 00 00 01 00 00 00	w2 = 1
;   uint8_t mask1 = 1 << bit1;
       2:	b4 04 00 00 01 00 00 00	w4 = 1
       3:	6c 34 00 00 00 00 00 00	w4 <<= w3
;   uint8_t bit2 = ctx->bit2;
       4:	71 15 02 00 00 00 00 00	r5 = *(u8 *)(r1 + 2)
;   uint8_t mask2 = 1 << bit2;
       5:	6c 52 00 00 00 00 00 00	w2 <<= w5
;   uint8_t result = value & ~(mask1 | mask2);
       6:	bc 26 00 00 00 00 00 00	w6 = w2
       7:	4c 46 00 00 00 00 00 00	w6 |= w4
       8:	a4 06 00 00 ff ff ff ff	w6 ^= -1
;   uint8_t value = ctx->value;
       9:	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0)
;   uint8_t result = value & ~(mask1 | mask2);
      10:	bc 10 00 00 00 00 00 00	w0 = w1
      11:	5c 60 00 00 00 00 00 00	w0 &= w6
;   result |= ((value & mask1) >> bit1) << bit2;
      12:	5c 14 00 00 00 00 00 00	w4 &= w1
      13:	7c 34 00 00 00 00 00 00	w4 >>= w3
      14:	6c 54 00 00 00 00 00 00	w4 <<= w5
      15:	4c 40 00 00 00 00 00 00	w0 |= w4
;   result |= ((value & mask2) >> bit2) << bit1;
      16:	5c 12 00 00 00 00 00 00	w2 &= w1
      17:	7c 52 00 00 00 00 00 00	w2 >>= w5
      18:	6c 32 00 00 00 00 00 00	w2 <<= w3
      19:	4c 20 00 00 00 00 00 00	w0 |= w2
;   return result;
      20:	54 00 00 00 ff 00 00 00	w0 &= 255
      21:	95 00 00 00 00 00 00 00	exit
